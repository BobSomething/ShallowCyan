#include "bithelpers.hpp"
#include "bitboard.hpp"


/*
This file was for generating magic numbers for sliding pieces.
But it is useless, because we have the numbers already.
*/

U64 ru64() {
  U64 u1, u2, u3, u4;
  u1 = (U64)(random()) & 0xFFFF; u2 = (U64)(random()) & 0xFFFF;
  u3 = (U64)(random()) & 0xFFFF; u4 = (U64)(random()) & 0xFFFF;
  return u1 | (u2 << 16) | (u3 << 32) | (u4 << 48);
}


U64 ru64_fewbits() {
  return ru64() & ru64() & ru64();
}

U64 get_a_magic_number(int square, int bishop, bool shift) {
    srand(time(0));
    bitboard_t bb;
    U64 occupied, value;
    int key, n, fail;

    U64 attack_mask = bishop ? bb.attacksBishop_mask_short(square) : bb.attacksRook_mask_short(square);
    n = get_count(attack_mask);
    if(shift)
        return n;

    for(int it = 0; it < 100000000; it++) {
        U64 current_magic = ru64_fewbits();

        if(get_count((attack_mask * current_magic) & 0xFF00000000000000ULL) < 6) continue;

        std::map<int,U64> map;
        
        int index;
        for(index = 0; index < (1 << n); index++) {
            occupied = get_set_with_index(index, attack_mask);

            value = bishop ? bb.attacksBishop_mask(square, occupied) : bb.attacksRook_mask(square, occupied);

            key = (int)((occupied*current_magic) >> (64 - n));
            if(map.find(key) == map.end()) map[key] = value;
            else if(map[key] != value) break;
        }
        if(index == (1 << n)) return current_magic;
    }
    std::cout << "Try again :(" << std::endl;
    return 0ULL;
}

void get_magic_numbers(int piece, bool shift) {
    for(int i=0; i<64; i++) {
        U64 x = get_a_magic_number(i,piece,shift);
        if(shift)
            std::cout << x << ", ";
        else
            std::cout << x << "ULL, "; 
    }
}

U64 magicRooks[64] = {2341871943977798784ULL, 2449975935508709640ULL, 72066669340581890ULL, 648523848749154312ULL, 180152783337684994ULL, 2449984654625079369ULL, 144159752690073884ULL, 3206564034472059008ULL, 41236086239789923ULL, 9228649761425350656ULL, 1154329016946148368ULL, 140771849142402ULL, 9367768734267408400ULL, 292874721857634432ULL, 281479271809028ULL, 1155736271570616450ULL, 630539681963966593ULL, 49539870783184904ULL, 1171363063652163584ULL, 2252349837967368ULL, 1171220676762144772ULL, 432628138850255872ULL, 2380156801246167312ULL, 9044582654353540ULL, 70379481759776ULL, 73747552002392195ULL, 45036548178051104ULL, 318866962518336ULL, 2030015145698656512ULL, 1154047413137180688ULL, 577023728027173891ULL, 18208470901739780ULL, 36064256277348496ULL, 11610280182962716712ULL, 2305878200053403648ULL, 4037479265230389504ULL, 2467306265380864ULL, 9147945341420544ULL, 9223943787934388752ULL, 864695666121644097ULL, 36346007198531588ULL, 2339761281089536ULL, 4503875042214144ULL, 1441169477240160288ULL, 1126449796907013ULL, 9228438623553192016ULL, 88272349167617ULL, 181270520662196225ULL, 1189550699407491584ULL, 1189550699407491584ULL, 2314868080047554816ULL, 4504699274273024ULL, 5638295694377088ULL, 4398080098432ULL, 2508287124480ULL, 180144539153203712ULL, 6790656835977289ULL, 4688282467335930113ULL, 36890857621880897ULL, 9083066094977081ULL, 324540716900941829ULL, 72339172127670275ULL, 9007754513616900ULL, 290623209815151138ULL};
int rookShifts[64] = {12, 11, 11, 11, 11, 11, 11, 12, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 12, 11, 11, 11, 11, 11, 11, 12};

U64 magicBishops[64] = {9317948771500558592ULL, 14078164666958848ULL, 9227876874657465292ULL, 4901060170157719618ULL, 1165619831506432ULL, 14430099111061495808ULL, 186345316648484912ULL, 569823042232324ULL, 9530778209361592401ULL, 5188181989497274922ULL, 14078164666958848ULL, 36670954761355264ULL, 9223517190106384658ULL, 4611708592863582720ULL, 720580409360130176ULL, 569823042232324ULL, 14078164666958848ULL, 81078023170032705ULL, 22588650416767010ULL, 7280068799833899008ULL, 162412172083726336ULL, 90494227695550465ULL, 2594146528679698432ULL, 4630043473163324418ULL, 1738496118523954177ULL, 72347938191837189ULL, 155462148628415104ULL, 11263947273535492ULL, 76706329476997120ULL, 2256816369058816ULL, 1193739877359945756ULL, 144419754009166016ULL, 3459336277048959008ULL, 1176020063179768096ULL, 4620838357513011266ULL, 2342172007275429952ULL, 1126175053447424ULL, 193524786069632ULL, 4616757245261137928ULL, 1177709463843438690ULL, 144749626690772994ULL, 18614736228851752ULL, 9044720894380041ULL, 1153494633767133312ULL, 653030918222528576ULL, 4612829649066598464ULL, 9227876839081910528ULL, 38324785612587044ULL, 186345316648484912ULL, 576531414448081408ULL, 18032549062311990ULL, 4611686019534815232ULL, 180152857188764704ULL, 70377401288704ULL, 11285666659172360ULL, 14078164666958848ULL, 569823042232324ULL, 569823042232324ULL, 9223381658724213760ULL, 1152921578160293952ULL, 74344578358117376ULL, 4899916575102999584ULL, 9530778209361592401ULL, 9317948771500558592ULL};
int bishopShifts[64] = {6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 7, 5, 5, 5, 5, 7, 9, 9, 7, 5, 5, 5, 5, 7, 9, 9, 7, 5, 5, 5, 5, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6};
